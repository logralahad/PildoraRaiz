import { dataSource } from "../db.config";
import { Pacients } from "../Entities/Pacient";
import { Persons } from "../Entities/Person";
const repo = dataSource.getRepository(Pacients);
export const createPacient = async (req, res) => {
    const { persona, calle, int, ext, colonia, img, userId } = req.body;
    const personaIn = await Persons.insert({
        nombre: persona.nombre,
        paterno: persona.paterno,
        materno: persona.materno,
        edad: persona.edad,
        telefono: persona.telefono,
    });
    try {
        const pacientIn = await Pacients.save({
            personaId: personaIn.identifiers[0].id,
            userId: userId,
            colonia: colonia,
            calle: calle,
            int: int,
            ext: ext,
            img: img,
            hasFile: false,
        });
        return res.send("Paciente registrado");
    }
    catch (error) {
        console.log(error);
        await Persons.delete({
            id: personaIn.identifiers[0].id,
        });
        return res.json({ error: "Hubo un error al registrar al paciente." });
    }
};
export const updatePacient = async (req, res) => {
    const { id } = req.params;
    const { persona, calle, int, ext, colonia, img } = req.body;
    const pacientFound = await Pacients.findOneBy({
        id: Number(id),
    });
    const personFound = await Persons.findOneBy({
        id: pacientFound?.personaId,
    });
    if (!personFound || !pacientFound)
        return res.json({
            success: false,
            message: "Paciente no existe",
        });
    const personaUpdate = await Persons.update({ id: personFound.id }, {
        nombre: persona.nombre,
        paterno: persona.paterno,
        materno: persona.materno,
        telefono: persona.telefono,
        edad: persona.edad,
    });
    const result = await Pacients.update({ id: pacientFound.id }, {
        colonia: colonia,
        calle: calle,
        int: int,
        ext: ext,
        img: img,
    });
    return res.json({
        success: result.affected === 1,
        message: result.affected === 1
            ? "Paciente actualizado correctamente"
            : "Hubo un error al actualizar",
    });
};
export const deletePacient = async (req, res) => {
    const { id } = req.params;
    const pacientFound = await Pacients.findOneBy({
        id: Number(id),
    });
    if (pacientFound) {
        const result = await Pacients.delete({ id: Number(id) });
        const resultTwo = await Persons.delete({ id: pacientFound.personaId });
        return res.send(resultTwo.affected === 1
            ? "Paciente eliminado"
            : "Hubo un error al eliminar al Paciente");
    }
    return res.send({ error: "Hubo un error al eliminar al Paciente" });
};
export const getAllPacients = async (req, res) => {
    const personsFound = await repo
        .createQueryBuilder("pacient")
        .leftJoinAndSelect("pacient.persona", "person")
        .addSelect(["*"])
        .getMany();
    return res.status(200).json(personsFound);
};
export const getPacientById = async (req, res) => {
    const { id } = req.params;
    const pacientFound = await repo
        .createQueryBuilder("pacient")
        .where("pacient.id = :id", { id: Number(id) })
        .leftJoinAndSelect("pacient.persona", "person")
        .addSelect(["*"])
        .getOne();
    return res.status(200).json(pacientFound);
};
export const getAllPacientsByUserId = async (req, res) => {
    const { userId } = req.params;
    const pacientsFound = await repo
        .createQueryBuilder("pacient")
        .where("pacient.userId = :id", { id: Number(userId) })
        .leftJoinAndSelect("pacient.persona", "person")
        .addSelect(["*"])
        .getMany();
    return res.status(200).json(pacientsFound);
};
export const getWithFiles = async (req, res) => {
    const pacientsWith = await repo
        .createQueryBuilder("pacient")
        .where("pacient.hasFile = :has", { has: true })
        .leftJoinAndSelect("pacient.persona", "person")
        .addSelect(["*"])
        .getMany();
    return res.status(200).json(pacientsWith);
};
export const getWithoutFiles = async (req, res) => {
    const pacientsWithout = await repo
        .createQueryBuilder("pacient")
        .where("pacient.hasFile = :has", { has: false })
        .leftJoinAndSelect("pacient.persona", "person")
        .addSelect(["*"])
        .getMany();
    return res.status(200).json(pacientsWithout);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUGFjaWVudC5jb250cm9sbGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL0NvbnRyb2xsZXJzL1BhY2llbnQuY29udHJvbGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQzFDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUMvQyxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFFN0MsTUFBTSxJQUFJLEdBQUcsVUFBVSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUVoRCxNQUFNLENBQUMsTUFBTSxhQUFhLEdBQUcsS0FBSyxFQUFFLEdBQVksRUFBRSxHQUFhLEVBQUUsRUFBRTtJQUNqRSxNQUFNLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFFLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQztJQUVwRSxNQUFNLFNBQVMsR0FBRyxNQUFNLE9BQU8sQ0FBQyxNQUFNLENBQUM7UUFDckMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxNQUFNO1FBQ3RCLE9BQU8sRUFBRSxPQUFPLENBQUMsT0FBTztRQUN4QixPQUFPLEVBQUUsT0FBTyxDQUFDLE9BQU87UUFDeEIsSUFBSSxFQUFFLE9BQU8sQ0FBQyxJQUFJO1FBQ2xCLFFBQVEsRUFBRSxPQUFPLENBQUMsUUFBUTtLQUMzQixDQUFDLENBQUM7SUFFSCxJQUFJO1FBQ0YsTUFBTSxTQUFTLEdBQUcsTUFBTSxRQUFRLENBQUMsSUFBSSxDQUFDO1lBQ3BDLFNBQVMsRUFBRSxTQUFTLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUU7WUFDdEMsTUFBTSxFQUFFLE1BQU07WUFDZCxPQUFPLEVBQUUsT0FBTztZQUNoQixLQUFLLEVBQUUsS0FBSztZQUNaLEdBQUcs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