import { Files } from "../Entities/File";
import { Pacients } from "../Entities/Pacient";
export const createFile = async (req, res) => {
    const { enfermedadActual, antecedentes, evolucion, anamnesis, exploracion, tratamiento, pacienteId, } = req.body;
    const fileIn = await Files.insert({
        enfermedadActual: enfermedadActual,
        antecedentes: antecedentes,
        evolucion: evolucion,
        anamnesis: anamnesis,
        exploracion: exploracion,
        tratamiento: tratamiento,
        pacienteId: pacienteId,
    });
    if (fileIn.identifiers[0].id) {
        const result = await Pacients.update({ id: pacienteId }, { hasFile: true });
        return res.json({
            success: result.affected === 1,
            message: result.affected === 1
                ? "Expediente creado correctamente."
                : "Hubo un error al crear el expediente",
        });
    }
    return res.json({ error: "Hubo un error al crear el expediente" });
};
export const updateFile = async (req, res) => {
    const { id } = req.params;
    const { enfermedadActual, antecedentes, evolucion, anamnesis, exploracion, tratamiento, } = req.body;
    const fileExists = await Files.findOneBy({ id: Number(id) });
    if (!fileExists) {
        return res.json({ error: "Hubo un error al actualizar el expediente" });
    }
    const fileUpdated = await Files.update({ id: Number(id) }, {
        enfermedadActual: enfermedadActual,
        antecedentes: antecedentes,
        evolucion: evolucion,
        anamnesis: anamnesis,
        exploracion: exploracion,
        tratamiento: tratamiento,
    });
    return res.json({
        success: fileUpdated.affected === 1,
        message: fileUpdated.affected === 1
            ? "Expediente actualizado correctamente."
            : "Hubo un error al crear el expediente",
    });
};
export const deleteFile = async (req, res) => {
    const { id } = req.params;
    const fileExists = await Files.findOneBy({ pacienteId: Number(id) });
    if (!fileExists) {
        return res.json({ error: "No existe el expediente" });
    }
    const result = await Files.delete({
        pacienteId: Number(id),
    });
    if (result.affected === 1) {
        const pacient = await Pacients.update({ id: fileExists.pacienteId }, { hasFile: false });
        return res.send(pacient.affected === 1
            ? "Expediente eliminado"
            : "Hubo un error al eliminar el Expediente");
    }
    return res.json({ error: "Hubo un error al eliminar el Expediente" });
};
export const getAllFiles = async (req, res) => {
    const filesFound = await Files.find();
    return res.json(filesFound);
};
export const getFileById = async (req, res) => {
    const { id } = req.params;
    const fileExists = await Files.findOneBy({ id: Number(id) });
    if (!fileExists) {
        return res.json({ error: "No existe el expediente" });
    }
    return res.json(fileExists);
};
export const getFileByPacientId = async (req, res) => {
    const { pacientId } = req.params;
    const fileExists = await Files.findOneBy({ pacienteId: Number(pacientId) });
    if (!fileExists) {
        return res.json({ error: "Paciente no tiene expediente" });
    }
    return res.json(fileExists);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRmlsZS5jb250cm9sbGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL0NvbnRyb2xsZXJzL0ZpbGUuY29udHJvbGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDekMsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRS9DLE1BQU0sQ0FBQyxNQUFNLFVBQVUsR0FBRyxLQUFLLEVBQUUsR0FBWSxFQUFFLEdBQWEsRUFBRSxFQUFFO0lBQzlELE1BQU0sRUFDSixnQkFBZ0IsRUFDaEIsWUFBWSxFQUNaLFNBQVMsRUFDVCxTQUFTLEVBQ1QsV0FBVyxFQUNYLFdBQVcsRUFDWCxVQUFVLEdBQ1gsR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDO0lBRWIsTUFBTSxNQUFNLEdBQUcsTUFBTSxLQUFLLENBQUMsTUFBTSxDQUFDO1FBQ2hDLGdCQUFnQixFQUFFLGdCQUFnQjtRQUNsQyxZQUFZLEVBQUUsWUFBWTtRQUMxQixTQUFTLEVBQUUsU0FBUztRQUNwQixTQUFTLEVBQUUsU0FBUztRQUNwQixXQUFXLEVBQUUsV0FBVztRQUN4QixXQUFXLEVBQUUsV0FBVztRQUN4QixVQUFVLEVBQUUsVUFBVTtLQUN2QixDQUFDLENBQUM7SUFFSCxJQUFJLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFO1FBQzVCLE1BQU0sTUFBTSxHQUFHLE1BQU0sUUFBUSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsRUFBRSxVQUFVLEVBQUUsRUFBRSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO1FBRTVFLE9BQU8sR0FBRyxDQUFDLElBQUksQ0FBQztZQUNkLE9BQU8sRUFBRSxNQUFNLENBQUMsUUFBUSxLQUFLLENBQUM7WUFDOUIsT0FBTyxFQUNMLE1BQU0sQ0FBQyxRQUFRLEtBQUssQ0FBQztnQkFDbkIsQ0FBQyxDQUFDLGtDQUFrQztnQkFDcEMsQ0FBQyxDQUFDLHNDQUFzQztTQUM3QyxDQUFDLENBQUM7S0FDSjtJQUVELE9BQU8sR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLEtBQUssRUFBRSxzQ0FBc0MsRUFBRSxDQUFDLENBQUM7QUFDckUsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUFHLEtBQUssRUFBRSxHQUFZLEVBQUUsR0FBYSxFQUFFLEVBQUU7SUFDOUQsTUFBTSxFQUFFLEVBQUUsRUFBRSxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUM7SUFDMUIsTUFBTSxFQUNKLGdCQUFnQixFQUNoQixZQUFZLEVBQ1osU0FBUyxFQUNULFNBQVMsRUFDVCxXQUFXLEVBQ1gsV0FBVyxHQUNaLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQztJQUViLE1BQU0sVUFBVSxHQUFHLE1BQU0sS0FBSyxDQUFDLFNBQVMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxNQUFNLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQzdELElBQUksQ0FBQyxVQUFVLEVBQUU7UUFDZixPQUFPLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxLQUFLLEVBQUUsMkNBQTJDLEVBQUUsQ0FBQyxDQUFDO0tBQ3pFO0lBRUQsTUFBTSxXQUFXLEdBQUcsTUFBTSxLQUFLLENBQUMsTUFBTSxDQUNwQyxFQUFFLEVBQUUsRUFBRSxNQUFNLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFDbEI7UUFDRSxnQkFBZ0IsRUFBRSxnQkFBZ0I7UUFDbEMsWUFBWSxFQUFFLFlBQVk7UUFDMUIsU0FBUyxFQUFFLFNBQVM7UUFDcEIsU0FBUyxFQUFFLFNBQVM7UUFDcEIsV0FBVyxFQUFFLFdBQVc7UUFDeEIsV0FBVyxFQUFFLFdBQVc7S0FDekIsQ0FDRixDQUFDO0lBRUYsT0FBTyxHQUFHLENBQUMsSUFBSSxDQUFDO1FBQ2QsT0FBTyxFQUFFLFdBQVcsQ0FBQyxRQUFRLEtBQUssQ0FBQztRQUNuQyxPQUFPLEVBQ0wsV0FBVyxDQUFDLFFBQVEsS0FBSyxDQUFDO1lBQ3hCLENBQUMsQ0FBQyx1Q0FBdUM7WUFDekMsQ0FBQyxDQUFDLHNDQUFzQztLQUM3QyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxVQUFVLEdBQUcsS0FBSyxFQUFFLEdBQVksRUFBRSxHQUFhLEVBQUUsRUFBRTtJQUM5RCxNQUFNLEVBQUUsRUFBRSxFQUFFLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQztJQUUxQixNQUFNLFVBQVUsR0FBRyxNQUFNLEtBQUssQ0FBQyxTQUFTLENBQUMsRUFBRSxVQUFVLEVBQUUsTUFBTSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNyRSxJQUFJLENBQUMsVUFBVSxFQUFFO1FBQ2YsT0FBTyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsS0FBSyxFQUFFLHlCQUF5QixFQUFFLENBQUMsQ0FBQztLQUN2RDtJQUVELE1BQU0sTUFBTSxHQUFHLE1BQU0sS0FBSyxDQUFDLE1BQU0sQ0FBQztRQUNoQyxVQUFVLEVBQUUsTUFBTSxDQUFDLEVBQUUsQ0FBQztLQUN2QixDQUFDLENBQUM7SUFFSCxJQUFJLE1BQU0sQ0FBQyxRQUFRLEtBQUssQ0FBQyxFQUFFO1FBQ3pCLE1BQU0sT0FBTyxHQUFHLE1BQU0sUUFBUSxDQUFDLE1BQU0sQ0FDbkMsRUFBRSxFQUFFLEVBQUUsVUFBVSxDQUFDLFVBQVUsRUFBRSxFQUM3QixFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsQ0FDbkIsQ0FBQztRQUVGLE9BQU8sR0FBRyxDQUFDLElBQUksQ0FDYixPQUFPLENBQUMsUUFBUSxLQUFLLENBQUM7WUFDcEIsQ0FBQyxDQUFDLHNCQUFzQjtZQUN4QixDQUFDLENBQUMseUNBQXlDLENBQzlDLENBQUM7S0FDSDtJQUNELE9BQU8sR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLEtBQUssRUFBRSx5Q0FBeUMsRUFBRSxDQUFDLENBQUM7QUFDeEUsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFHLEtBQUssRUFBRSxHQUFZLEVBQUUsR0FBYSxFQUFFLEVBQUU7SUFDL0QsTUFBTSxVQUFVLEdBQUcsTUFBTSxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDdEMsT0FBTyxHQUFHLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQzlCLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLFdBQVcsR0FBRyxLQUFLLEVBQUUsR0FBWSxFQUFFLEdBQWEsRUFBRSxFQUFFO0lBQy9ELE1BQU0sRUFBRSxFQUFFLEVBQUUsR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDO0lBRTFCLE1BQU0sVUFBVSxHQUFHLE1BQU0sS0FBSyxDQUFDLFNBQVMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxNQUFNLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQzdELElBQUksQ0FBQyxVQUFVLEVBQUU7UUFDZixPQUFPLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxLQUFLLEVBQUUseUJBQXlCLEVBQUUsQ0FBQyxDQUFDO0tBQ3ZEO0lBRUQsT0FBTyxHQUFHLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQzlCLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLGtCQUFrQixHQUFHLEtBQUssRUFBRSxHQUFZLEVBQUUsR0FBYSxFQUFFLEVBQUU7SUFDdEUsTUFBTSxFQUFFLFNBQVMsRUFBRSxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUM7SUFFakMsTUFBTSxVQUFVLEdBQUcsTUFBTSxLQUFLLENBQUMsU0FBUyxDQUFDLEVBQUUsVUFBVSxFQUFFLE1BQU0sQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDNUUsSUFBSSxDQUFDLFVBQVUsRUFBRTtRQUNmLE9BQU8sR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLEtBQUssRUFBRSw4QkFBOEIsRUFBRSxDQUFDLENBQUM7S0FDNUQ7SUFFRCxPQUFPLEdBQUcsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDOUIsQ0FBQyxDQUFDIn0=