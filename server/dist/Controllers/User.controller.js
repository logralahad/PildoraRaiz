import { Persons } from "../Entities/Person";
import { Usuarios } from "../Entities/User";
import * as argon2 from "argon2";
import { dataSource } from "../db.config";
import { __token__ } from "../constants";
const jwt = require("jsonwebtoken");
const repo = dataSource.getRepository(Usuarios);
require("dotenv").config();
export const createUser = async (req, res) => {
    const { persona, rolId, username, password } = req.body;
    const personaIn = await Persons.insert({
        nombre: persona.nombre,
        paterno: persona.paterno,
        materno: persona.materno,
        edad: persona.edad,
        telefono: persona.telefono,
    });
    const hashedPassword = await argon2.hash(password);
    try {
        const userInsert = await Usuarios.save({
            personaId: personaIn.identifiers[0].id,
            rolId: rolId,
            username: username,
            password: hashedPassword,
        });
        if (userInsert) {
            let payload = {
                id: userInsert.id,
                username: username,
            };
            const token = jwt.sign(payload, process.env.TOKEN_SECRET);
            return res.send({ userInsert, token });
        }
    }
    catch (error) {
        await Persons.delete({
            id: personaIn.identifiers[0].id,
        });
        return res.json({ error: "Hubo un error al registrar al usuario." });
    }
};
export const login = async (req, res) => {
    const { username, password } = req.body;
    const userFound = await repo
        .createQueryBuilder("user")
        .where("user.username = :username", { username: username })
        .leftJoinAndSelect("user.persona", "person")
        .addSelect(["*"])
        .leftJoinAndSelect("user.rol", "rol")
        .addSelect(["*"])
        .getOne();
    if (!userFound) {
        return res.json({ message: "Usuario no existe" });
    }
    const valid = await argon2.verify(userFound.password, password);
    if (!valid) {
        return res.json({ message: "ContraseÃ±a incorrecta" });
    }
    let payload = { id: userFound.id, username: userFound.username };
    const token = jwt.sign(payload, __token__);
    return res.status(200).header("auth-token", token).json({ userFound, token });
};
export const getUserById = async (req, res) => {
    const { id } = req.params;
    const userFound = await repo
        .createQueryBuilder("user")
        .where("user.id = :id", { id: Number(id) })
        .leftJoinAndSelect("user.persona", "person")
        .addSelect(["*"])
        .leftJoinAndSelect("user.rol", "rol")
        .addSelect(["*"])
        .getOne();
    return res.status(200).json(userFound);
};
export const getUserByRol = async (req, res) => {
    const { rol } = req.params;
    const usersFound = await Usuarios.find({
        where: { rolId: Number(rol) },
    });
    return res.status(200).json(usersFound);
};
export const getAllUsers = async (req, res) => {
    const usersFound = await repo
        .createQueryBuilder("user")
        .leftJoinAndSelect("user.persona", "person")
        .addSelect(["*"])
        .leftJoinAndSelect("user.rol", "rol")
        .addSelect(["*"])
        .getMany();
    return res.status(200).json(usersFound);
};
export const updateUser = async (req, res) => {
    const { id } = req.params;
    const { persona, username, password, rolId } = req.body;
    const userFound = await Usuarios.findOneBy({
        id: Number(id),
    });
    const personFound = await Persons.findOneBy({
        id: userFound?.personaId,
    });
    if (!personFound || !userFound)
        return res.json({
            success: false,
            message: "Usuario no existe",
        });
    const personaUpdate = await Persons.update({ id: personFound.id }, {
        nombre: persona.nombre,
        paterno: persona.paterno,
        materno: persona.materno,
        telefono: persona.telefono,
        edad: persona.edad,
    });
    const hashedPassword = await argon2.hash(password);
    const result = await Usuarios.update({ id: userFound.id }, {
        rolId: rolId,
        username: username,
        password: password !== "" ? hashedPassword : userFound.password,
    });
    return res.json({
        success: result.affected === 1,
        message: result.affected === 1
            ? "Usuario actualizado correctamente"
            : "Hubo un error al actualizar",
    });
};
export const deleteUser = async (req, res) => {
    const { id } = req.params;
    const userFound = await Usuarios.findOneBy({
        id: Number(id),
    });
    if (userFound) {
        try {
            const result = await Usuarios.delete({
                id: Number(id),
            });
            const resultTwo = await Persons.delete({
                id: userFound.personaId,
            });
            return res.send(resultTwo.affected === 1
                ? "Usuario eliminado"
                : "Hubo un error al eliminar al Usuario");
        }
        catch (error) {
            return res.send({ error: "Hubo un error al eliminar al Usuario" });
        }
    }
    return res.send({ error: "Hubo un error al eliminar al Usuario" });
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVXNlci5jb250cm9sbGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL0NvbnRyb2xsZXJzL1VzZXIuY29udHJvbGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDN0MsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBRTVDLE9BQU8sS0FBSyxNQUFNLE1BQU0sUUFBUSxDQUFDO0FBQ2pDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDMUMsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUV6QyxNQUFNLEdBQUcsR0FBRyxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUM7QUFDcEMsTUFBTSxJQUFJLEdBQUcsVUFBVSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUNoRCxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUM7QUFFM0IsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUFHLEtBQUssRUFBRSxHQUFZLEVBQUUsR0FBYSxFQUFFLEVBQUU7SUFDOUQsTUFBTSxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUM7SUFFeEQsTUFBTSxTQUFTLEdBQUcsTUFBTSxPQUFPLENBQUMsTUFBTSxDQUFDO1FBQ3JDLE1BQU0sRUFBRSxPQUFPLENBQUMsTUFBTTtRQUN0QixPQUFPLEVBQUUsT0FBTyxDQUFDLE9BQU87UUFDeEIsT0FBTyxFQUFFLE9BQU8sQ0FBQyxPQUFPO1FBQ3hCLElBQUksRUFBRSxPQUFPLENBQUMsSUFBSTtRQUNsQixRQUFRLEVBQUUsT0FBTyxDQUFDLFFBQVE7S0FDM0IsQ0FBQyxDQUFDO0lBRUgsTUFBTSxjQUFjLEdBQUcsTUFBTSxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEs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